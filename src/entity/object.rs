//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "object")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = true)]
	pub id: i64,
	pub hash: String,
	pub actor_id: i32,
	pub sequence: i32,
	pub previous_hash: Option<String>,
	pub created: i32,
	pub found: i32,
	pub r#type: i32,
	#[sea_orm(column_type = "Binary(BlobSize::Blob(None))")]
	pub signature: Vec<u8>,
	pub verified_from_start: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::boost_object::Entity")]
	BoostObject,
	#[sea_orm(
		belongs_to = "super::identity::Entity",
		from = "Column::ActorId",
		to = "super::identity::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Identity,
	#[sea_orm(has_many = "super::post_object::Entity")]
	PostObject,
}

impl Related<super::boost_object::Entity> for Entity {
	fn to() -> RelationDef { Relation::BoostObject.def() }
}

impl Related<super::identity::Entity> for Entity {
	fn to() -> RelationDef { Relation::Identity.def() }
}

impl Related<super::post_object::Entity> for Entity {
	fn to() -> RelationDef { Relation::PostObject.def() }
}

impl ActiveModelBehavior for ActiveModel {}
